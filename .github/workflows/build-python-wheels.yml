# Build wheels for many platforms
# see: https://github.com/pypa/cibuildwheel

name: Build Python wheels

on:
  push:
    branches:
    - main
    paths:
    - 'nlpo3-python/**'
    - '!nlpo3-python/**.md'
    - '!nlpo3-python/notebooks/**'
    - '.github/workflows/build-python-wheels.yml'
  pull_request:
    branches:
    - main
    paths:
    - 'nlpo3-python/**'
    - '!nlpo3-python/**.md'
    - '!nlpo3-python/notebooks/**'
    - '.github/workflows/build-python-wheels.yml'
  release:
    types: [published]
  # Manual run
  workflow_dispatch: {}

jobs:
  echo_github_env:
    name: Echo GitHub environment variables
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "github.event.action   : ${{ github.event.action }}"
        echo "github.event_name     : ${{ github.event_name }}"
        echo "github.ref            : ${{ github.ref }}"
        echo "github.event.ref      : ${{ github.event.ref }}"
        echo "github.event.ref_type : ${{ github.event.ref_type }}"

  # Check whether to build the wheels and the source tarball
  check_build_trigger:
    name: Check build trigger
    runs-on: ubuntu-latest
    # Not for forks
    if: github.repository == 'pythainlp/nlpo3'
    outputs:
      build: ${{ steps.check_build_trigger.outputs.build }}
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    - id: check_build_trigger
      name: Check build trigger
      run: bash build_tools/github/check_build_trigger.sh
      # To trigger the build steps, add "[cd build]" to commit message

  build_wheels:
    name: Build ${{ matrix.python-version }}-${{ matrix.platform_id }}
    runs-on: ${{ matrix.os }}
    needs: check_build_trigger
    if: needs.check_build_trigger.outputs.build
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      # For build identier, see:
      # https://cibuildwheel.pypa.io/en/stable/options/#build-skip
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: ["3.13", "3.12", "3.11", "3.10", "3.9", "3.8", "3.7", "pypy3.10", "pypy3.9"]
        bitness: [64, 32]
        include:
        - os: macos-latest
          bitness: 64
          platform_id: macosx_x86_64
        - os: macos-latest
          bitness: 64
          platform_id: macosx_arm64
        - os: ubuntu-latest
          bitness: 64
          platform_id: manylinux_x86_64
        - os: ubuntu-latest
          bitness: 32
          platform_id: manylinux_i686
        # - os: ubuntu-latest
        #   bitness: 64
        #   platform_id: musllinux_x86_64
        # - os: ubuntu-latest
        #   bitness: 32
        #   platform_id: musllinux_i686
        # - os: ubuntu-latest
        #   bitness: 64
        #   platform_id: manylinux_aarch64
        # - os: ubuntu-latest
        #   bitness: 64
        #   platform_id: musllinux_aarch64
        - os: windows-latest
          bitness: 64
          platform_id: win_amd64
        - os: windows-latest
          bitness: 32
          platform_id: win32
        exclude:
        - os: macos-latest
          bitness: 32
        - os: macos-latest
          python-version: "3.7"
        - python-version: "pypy3.10"
          bitness: 32
        - python-version: "pypy3.9"
          bitness: 32
    env:
      CP_VER: ""
    steps:
    # cibuildwheel needs a specific Python implementation ID
    - name: Make Python implementation ID
      id: convert-version-id
      if: startsWith(matrix.os, 'windows-') == false
      run: |
        PYTHON_VERSION=${{ matrix.python-version }}
        if [[ "$PYTHON_VERSION" == pypy* ]]; then
          CP_VER="pp${PYTHON_VERSION:4}"
          CP_VER="${CP_VER//./}"
        else
          CP_VER="cp${PYTHON_VERSION//./}"
        fi
        echo "Python version: $CP_VER"
        echo "CP_VER=$CP_VER" >> $GITHUB_ENV
    - name: Make Python implementation ID (Windows)
      id: convert-version-id-win
      if: startsWith(matrix.os, 'windows-')
      shell: powershell
      run: |
        $PYTHON_VERSION = "${{ matrix.python-version }}"
        if ($PYTHON_VERSION -like "pypy*") {
          $CP_VER = "pp" + $PYTHON_VERSION.Substring(4).Replace(".", "")
        } else {
          $CP_VER = "cp" + $PYTHON_VERSION.Replace(".", "")
        }
        echo "Python version: $CP_VER"
        echo "CP_VER=$CP_VER" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - name: Checkout source code
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: "pip"
    - name: Setup Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
    - name: Set path
      if: startsWith(matrix.os, 'windows-') == false
      run: export PATH="$HOME/.cargo/bin:$PATH"
    - name: Install dependencies
      run: |
        pip install --upgrade pip
    - name: Build Python wheels
      uses: pypa/cibuildwheel@v2.21.3
      with:
        package-dir: nlpo3-python
        output-dir: wheelhouse
      env:
        CIBW_BUILD_VERBOSITY: 1
        # See build selector name at:
        # https://cibuildwheel.readthedocs.io/en/stable/options/#build-skip
        CIBW_BUILD: ${{ env.CP_VER }}-${{ matrix.platform_id }}
        CIBW_ENVIRONMENT_MACOS: |
          MACOSX_DEPLOYMENT_TARGET=10.9
          PATH="$HOME/.cargo/bin:$PATH"
          CC=/usr/bin/clang
          CXX=/usr/bin/clang++
        CIBW_ENVIRONMENT_LINUX: PATH="$HOME/.cargo/bin:$PATH"
        CIBW_BEFORE_BUILD_LINUX: |
          pip install --upgrade setuptools-rust
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    - name: Store artifacts
      uses: actions/upload-artifact@v3
      with:
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build Python source distribution
    runs-on: ubuntu-latest
    needs: check_build_trigger
    if: needs.check_build_trigger.outputs.build
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        cache: "pip"
    - name: Build source distribution
      run: |
        cd nlpo3-python
        bash ../build_tools/github/build_source.sh
    - name: Store artifacts
      uses: actions/upload-artifact@v3
      with:
        path: nlpo3-python/dist/*.tar.gz

  publish_pypi:
    name: Publish Python package to PyPI
    runs-on: ubuntu-latest
    needs: [build_wheels, build_sdist]
    # Upload to PyPI on every tag starting with 'v'
    #if: github.event_name == 'push' && startsWith(github.event.ref, 'v')
    # Alternatively, to publish when a GitHub Release is created, use the following rule:
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - name: Retrieve artifacts
      uses: actions/download-artifact@v3
      with:
        name: artifact
        path: dist
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@v1.12.2
      with:
        skip-existing: true
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

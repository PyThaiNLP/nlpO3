# Build wheels for many platforms
# see: https://github.com/pypa/cibuildwheel

name: Build wheels

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest,]
        #python: [36, 37, 38, 39]
        bitness: [32, 64]
        manylinux_image: [manylinux2010, manylinux2014]
        # os: [ubuntu-latest]
        python: [36]
        # bitness: [64]
        # manylinux_image: [manylinux2014]
        include:
          - os: windows-latest
            bitness: 64
            platform_id: win_amd64
          - os: windows-latest
            bitness: 32
            platform_id: win32
          - os: ubuntu-latest
            bitness: 64
            platform_id: manylinux_x86_64
          - os: ubuntu-latest
            bitness: 32
            platform_id: manylinux_i686
          - os: macos-latest
            bitness: 64
            platform_id: macosx_x86_64
        exclude:
          - os: macos-latest
            bitness: 32
          - os: windows-latest
            manylinux_image: manylinux2010
          - os: macos-latest
            manylinux_image: manylinux2010

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
          
      - if: ${{ !startsWith(matrix.os, 'windows') || matrix.bitness != '32' }}
        name: Setup Rust toolchain - non-win32
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - if: startsWith(matrix.os, 'windows') && matrix.bitness == '32'
        name: Setup Rust toolchain - win32
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: i686-pc-windows-msvc

      - name: Setup Rust dependencies
        uses: actions-rs/cargo@v1
        with:
          command: check

      - name: Cache Rust Cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-cache-cp${{ matrix.python }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build wheels
        uses: pypa/cibuildwheel@v1.12.0
        with:
          output-dir: wheelhouse
        env:
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_ENVIRONMENT_LINUX: PATH="$HOME/.cargo/bin:$PATH"
          CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=10.13
                                  PATH="$HOME/.cargo/bin:$PATH"
                                  CC=/usr/bin/clang
                                  CXX=/usr/bin/clang++
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
#          CIBW_BEFORE_ALL: >
#            python -m pip install --upgrade pip &&
#            python -m pip install --upgrade setuptools-rust
          CIBW_BEFORE_BUILD_LINUX: >
            curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain=stable --profile=minimal -y
          CIBW_BEFORE_BUILD_WINDOWS: 'rustup default stable'

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Source distribution
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'

      - name: Build source distribution
        run: bash build_tools/github/build_source.sh

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz
